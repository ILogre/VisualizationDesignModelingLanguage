package VisualizationDesign.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Category").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("type").create();
      case 1:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Cell").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("ponderation").references("visualizations").create();
      case 2:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Colorization").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").properties("color").create();
      case 3:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Column").super_("VisualizationDesign.structure.Container").parents("VisualizationDesign.structure.Container").alias("column", "").create();
      case 4:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Container").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"cells"}, new boolean[]{true}).abstract_().create();
      case 5:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Dashboard").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.execution.util.structure.IMainClass", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"windows", "data", "visualizations", "interactions"}, new boolean[]{true, true, true, true}).create();
      case 6:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Data").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("url").children(new String[]{"categories"}, new boolean[]{true}).create();
      case 7:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Discrete").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").create();
      case 8:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.HowQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("concern").create();
      case 9:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Icon").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").properties("path").create();
      case 10:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Interaction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").abstract_().create();
      case 11:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Line").super_("VisualizationDesign.structure.Container").parents("VisualizationDesign.structure.Container").alias("line", "").create();
      case 12:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Property").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").properties("property").create();
      case 13:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Source").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("data", "field").children(new String[]{"concerns"}, new boolean[]{true}).create();
      case 14:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Structural").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").create();
      case 15:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Threshold").super_("VisualizationDesign.structure.WhatQualifier").parents("VisualizationDesign.structure.WhatQualifier").properties("ceiling", "floor").create();
      case 16:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Visualization").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"concerns", "source"}, new boolean[]{true, true}).create();
      case 17:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.WhatQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 18:
        return new ConceptDescriptorBuilder("VisualizationDesign.structure.Window").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"containers"}, new boolean[]{true}).create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"VisualizationDesign.structure.Category", "VisualizationDesign.structure.Cell", "VisualizationDesign.structure.Colorization", "VisualizationDesign.structure.Column", "VisualizationDesign.structure.Container", "VisualizationDesign.structure.Dashboard", "VisualizationDesign.structure.Data", "VisualizationDesign.structure.Discrete", "VisualizationDesign.structure.HowQualifier", "VisualizationDesign.structure.Icon", "VisualizationDesign.structure.Interaction", "VisualizationDesign.structure.Line", "VisualizationDesign.structure.Property", "VisualizationDesign.structure.Source", "VisualizationDesign.structure.Structural", "VisualizationDesign.structure.Threshold", "VisualizationDesign.structure.Visualization", "VisualizationDesign.structure.WhatQualifier", "VisualizationDesign.structure.Window"};
}
