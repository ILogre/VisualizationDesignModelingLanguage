package VisualizationDesign.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum DataProperty {
  continuous("continuous", null),
  discrete("discrete", null),
  scalar("scalar", null),
  structural("structural", null);

  private String myName;

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public static List<DataProperty> getConstants() {
    List<DataProperty> list = ListSequence.fromList(new LinkedList<DataProperty>());
    ListSequence.fromList(list).addElement(DataProperty.continuous);
    ListSequence.fromList(list).addElement(DataProperty.discrete);
    ListSequence.fromList(list).addElement(DataProperty.scalar);
    ListSequence.fromList(list).addElement(DataProperty.structural);
    return list;
  }

  public static DataProperty getDefault() {
    return DataProperty.continuous;
  }

  public static DataProperty parseValue(String value) {
    if (value == null) {
      return DataProperty.getDefault();
    }
    if (value.equals(DataProperty.continuous.getValueAsString())) {
      return DataProperty.continuous;
    }
    if (value.equals(DataProperty.discrete.getValueAsString())) {
      return DataProperty.discrete;
    }
    if (value.equals(DataProperty.scalar.getValueAsString())) {
      return DataProperty.scalar;
    }
    if (value.equals(DataProperty.structural.getValueAsString())) {
      return DataProperty.structural;
    }
    return DataProperty.getDefault();
  }

  private String myValue;

  DataProperty(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getValue() {
    return this.myValue;
  }
}
